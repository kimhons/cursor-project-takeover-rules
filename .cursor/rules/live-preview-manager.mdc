---
description: "Enable live preview and hot reload functionality for real-time development feedback and instant visual updates"
globs: ["*"]
alwaysApply: false
---

# Live Preview & Hot Reload Manager

You are helping someone with no coding experience set up live preview and hot reload functionality to see their changes instantly as they develop, enabling real-time feedback and faster iteration.

## Live Preview Setup Process

### Step 1: Understanding Live Preview and Hot Reload

#### What is Live Preview and Hot Reload?
Think of live preview like having a magic mirror that instantly shows changes:
- **Live Preview**: Like having a window that shows your website/app as you build it
- **Hot Reload**: Like having changes appear instantly without refreshing the page
- **Real-time Feedback**: Like seeing your painting change as you add each brushstroke
- **Development Server**: Like having a personal assistant that rebuilds your app automatically
- **Browser Sync**: Like having multiple mirrors that all update at the same time
- **Error Display**: Like having a helpful friend point out mistakes immediately

#### Why Live Preview and Hot Reload Matter:
- **Instant Feedback**: See changes immediately without manual refreshing
- **Faster Development**: Reduce the time between making changes and seeing results
- **Better Debugging**: Identify issues quickly with real-time error display
- **Improved Workflow**: Maintain focus without context switching
- **Enhanced Productivity**: Iterate faster with immediate visual confirmation
- **Better User Experience**: Test responsive design and interactions in real-time

#### Common Live Preview Challenges:
- **Setup Complexity**: Difficult configuration for non-technical users
- **Port Conflicts**: Multiple services trying to use the same port
- **Browser Caching**: Old versions of files being displayed
- **Hot Reload Failures**: Changes not being detected or applied
- **Performance Issues**: Slow reload times affecting development flow
- **Cross-device Testing**: Difficulty testing on multiple devices simultaneously

### Step 2: Automated Development Server Setup

#### Intelligent Development Server Manager:

**Universal Development Server:**
```javascript
// dev-server-manager.js
class DevServerManager {
  constructor(projectPath) {
    this.projectPath = projectPath;
    this.serverConfig = {
      port: 3000,
      host: '0.0.0.0',
      open: true,
      hot: true,
      liveReload: true
    };
    this.activeServers = new Map();
  }

  async setupLivePreview() {
    const setup = {
      projectType: await this.detectProjectType(),
      serverConfig: await this.generateServerConfig(),
      dependencies: await this.installDependencies(),
      scripts: await this.setupScripts(),
      proxy: await this.setupProxy(),
      monitoring: await this.setupMonitoring()
    };

    return this.startDevelopmentServer(setup);
  }

  async detectProjectType() {
    const packageJson = await this.readPackageJson();
    const files = await this.scanProjectFiles();
    
    const detection = {
      framework: 'unknown',
      buildTool: 'unknown',
      hasBackend: false,
      hasFrontend: false,
      confidence: 0
    };

    // Detect React
    if (packageJson?.dependencies?.react || files.some(f => f.includes('jsx'))) {
      detection.framework = 'react';
      detection.confidence = 0.9;
      detection.hasFrontend = true;
    }

    // Detect Vue
    if (packageJson?.dependencies?.vue || files.some(f => f.includes('.vue'))) {
      detection.framework = 'vue';
      detection.confidence = 0.9;
      detection.hasFrontend = true;
    }

    // Detect Angular
    if (packageJson?.dependencies?.['@angular/core'] || files.some(f => f.includes('angular.json'))) {
      detection.framework = 'angular';
      detection.confidence = 0.9;
      detection.hasFrontend = true;
    }

    // Detect Next.js
    if (packageJson?.dependencies?.next || files.some(f => f.includes('next.config'))) {
      detection.framework = 'nextjs';
      detection.confidence = 0.95;
      detection.hasFrontend = true;
      detection.hasBackend = true;
    }

    // Detect Vite
    if (packageJson?.devDependencies?.vite || files.some(f => f.includes('vite.config'))) {
      detection.buildTool = 'vite';
      detection.confidence = Math.max(detection.confidence, 0.8);
    }

    // Detect Webpack
    if (packageJson?.devDependencies?.webpack || files.some(f => f.includes('webpack.config'))) {
      detection.buildTool = 'webpack';
      detection.confidence = Math.max(detection.confidence, 0.7);
    }

    // Detect Express/Node backend
    if (packageJson?.dependencies?.express || files.some(f => f.includes('server.js'))) {
      detection.hasBackend = true;
      detection.confidence = Math.max(detection.confidence, 0.8);
    }

    // Detect static HTML
    if (files.some(f => f.endsWith('.html')) && !detection.hasFrontend) {
      detection.framework = 'static';
      detection.confidence = 0.6;
      detection.hasFrontend = true;
    }

    return detection;
  }

  async generateServerConfig(projectType) {
    const baseConfig = {
      port: await this.findAvailablePort(3000),
      host: '0.0.0.0',
      open: true,
      hot: true,
      liveReload: true,
      compress: true,
      historyApiFallback: true
    };

    const frameworkConfigs = {
      react: {
        ...baseConfig,
        static: {
          directory: 'public',
          publicPath: '/'
        },
        devMiddleware: {
          publicPath: '/'
        },
        client: {
          overlay: {
            errors: true,
            warnings: false
          }
        }
      },
      vue: {
        ...baseConfig,
        static: {
          directory: 'public'
        },
        devMiddleware: {
          publicPath: '/'
        }
      },
      nextjs: {
        ...baseConfig,
        port: await this.findAvailablePort(3000),
        dev: true,
        quiet: false
      },
      static: {
        ...baseConfig,
        static: {
          directory: '.',
          watch: true
        },
        watchFiles: ['**/*.html', '**/*.css', '**/*.js']
      }
    };

    return frameworkConfigs[projectType.framework] || baseConfig;
  }

  async findAvailablePort(startPort) {
    const net = require('net');
    
    const isPortAvailable = (port) => {
      return new Promise((resolve) => {
        const server = net.createServer();
        server.listen(port, () => {
          server.close(() => resolve(true));
        });
        server.on('error', () => resolve(false));
      });
    };

    let port = startPort;
    while (!(await isPortAvailable(port))) {
      port++;
      if (port > startPort + 100) {
        throw new Error('No available ports found');
      }
    }
    
    return port;
  }

  async installDependencies(projectType) {
    const dependencies = {
      devDependencies: [],
      scripts: {}
    };

    switch (projectType.framework) {
      case 'react':
        if (projectType.buildTool === 'vite') {
          dependencies.devDependencies.push('@vitejs/plugin-react');
        } else {
          dependencies.devDependencies.push('webpack-dev-server', 'html-webpack-plugin');
        }
        break;
        
      case 'vue':
        if (projectType.buildTool === 'vite') {
          dependencies.devDependencies.push('@vitejs/plugin-vue');
        } else {
          dependencies.devDependencies.push('vue-loader', 'webpack-dev-server');
        }
        break;
        
      case 'static':
        dependencies.devDependencies.push('live-server', 'browser-sync');
        break;
        
      case 'nextjs':
        // Next.js has built-in dev server
        break;
    }

    // Universal dependencies
    dependencies.devDependencies.push(
      'concurrently',
      'nodemon',
      'chokidar'
    );

    return this.installPackages(dependencies);
  }

  async setupScripts(projectType, serverConfig) {
    const scripts = {};

    switch (projectType.framework) {
      case 'react':
        if (projectType.buildTool === 'vite') {
          scripts.dev = 'vite';
          scripts.build = 'vite build';
          scripts.preview = 'vite preview';
        } else {
          scripts.dev = 'webpack serve --mode development';
          scripts.build = 'webpack --mode production';
        }
        break;
        
      case 'vue':
        if (projectType.buildTool === 'vite') {
          scripts.dev = 'vite';
          scripts.build = 'vite build';
        } else {
          scripts.dev = 'webpack serve --mode development';
        }
        break;
        
      case 'nextjs':
        scripts.dev = 'next dev';
        scripts.build = 'next build';
        scripts.start = 'next start';
        break;
        
      case 'static':
        scripts.dev = `live-server --port=${serverConfig.port} --host=${serverConfig.host}`;
        scripts.sync = `browser-sync start --server --files "**/*" --port ${serverConfig.port + 1}`;
        break;
    }

    // Universal scripts
    scripts['dev:watch'] = 'nodemon --watch src --exec "npm run dev"';
    scripts['dev:multi'] = 'concurrently "npm run dev" "npm run sync"';

    return this.updatePackageJsonScripts(scripts);
  }

  async startDevelopmentServer(setup) {
    const serverInstance = {
      id: this.generateServerId(),
      type: setup.projectType.framework,
      config: setup.serverConfig,
      process: null,
      status: 'starting',
      url: null,
      logs: []
    };

    try {
      // Start the appropriate server based on project type
      switch (setup.projectType.framework) {
        case 'react':
        case 'vue':
          serverInstance.process = await this.startWebpackDevServer(setup);
          break;
          
        case 'nextjs':
          serverInstance.process = await this.startNextDevServer(setup);
          break;
          
        case 'static':
          serverInstance.process = await this.startStaticServer(setup);
          break;
          
        default:
          serverInstance.process = await this.startGenericServer(setup);
      }

      serverInstance.status = 'running';
      serverInstance.url = `http://${setup.serverConfig.host}:${setup.serverConfig.port}`;
      
      this.activeServers.set(serverInstance.id, serverInstance);
      
      // Setup monitoring
      await this.setupServerMonitoring(serverInstance);
      
      return {
        success: true,
        server: serverInstance,
        instructions: this.generateUsageInstructions(serverInstance)
      };
      
    } catch (error) {
      serverInstance.status = 'failed';
      serverInstance.error = error.message;
      
      return {
        success: false,
        error: error.message,
        troubleshooting: this.generateTroubleshootingSteps(error)
      };
    }
  }

  async startWebpackDevServer(setup) {
    const webpack = require('webpack');
    const WebpackDevServer = require('webpack-dev-server');
    
    const webpackConfig = await this.generateWebpackConfig(setup);
    const compiler = webpack(webpackConfig);
    
    const devServerOptions = {
      ...setup.serverConfig,
      setupMiddlewares: (middlewares, devServer) => {
        // Add custom middleware for enhanced development experience
        devServer.app.get('/api/dev-status', (req, res) => {
          res.json({
            status: 'running',
            timestamp: new Date().toISOString(),
            hot: setup.serverConfig.hot,
            liveReload: setup.serverConfig.liveReload
          });
        });
        
        return middlewares;
      }
    };
    
    const server = new WebpackDevServer(devServerOptions, compiler);
    
    await server.start();
    
    return server;
  }

  async generateWebpackConfig(setup) {
    const path = require('path');
    
    const config = {
      mode: 'development',
      entry: './src/index.js',
      output: {
        path: path.resolve(this.projectPath, 'dist'),
        filename: 'bundle.js',
        publicPath: '/'
      },
      module: {
        rules: [
          {
            test: /\.(js|jsx)$/,
            exclude: /node_modules/,
            use: {
              loader: 'babel-loader',
              options: {
                presets: ['@babel/preset-react']
              }
            }
          },
          {
            test: /\.css$/,
            use: ['style-loader', 'css-loader']
          },
          {
            test: /\.(png|svg|jpg|jpeg|gif)$/i,
            type: 'asset/resource'
          }
        ]
      },
      plugins: [
        new (require('html-webpack-plugin'))({
          template: './public/index.html'
        })
      ],
      resolve: {
        extensions: ['.js', '.jsx']
      },
      devtool: 'eval-source-map'
    };

    return config;
  }

  async setupHotReload(serverInstance) {
    const hotReload = {
      enabled: true,
      watchOptions: {
        ignored: /node_modules/,
        poll: 1000
      },
      overlay: {
        warnings: false,
        errors: true
      },
      clientLogLevel: 'info'
    };

    // Setup file watchers
    const chokidar = require('chokidar');
    
    const watcher = chokidar.watch(['src/**/*', 'public/**/*'], {
      ignored: /(^|[\/\\])\../,
      persistent: true
    });

    watcher.on('change', async (filePath) => {
      console.log(`File changed: ${filePath}`);
      await this.handleFileChange(serverInstance, filePath);
    });

    watcher.on('add', async (filePath) => {
      console.log(`File added: ${filePath}`);
      await this.handleFileAdd(serverInstance, filePath);
    });

    watcher.on('unlink', async (filePath) => {
      console.log(`File removed: ${filePath}`);
      await this.handleFileRemove(serverInstance, filePath);
    });

    serverInstance.watcher = watcher;
    serverInstance.hotReload = hotReload;

    return hotReload;
  }

  async handleFileChange(serverInstance, filePath) {
    const changeType = this.determineChangeType(filePath);
    
    switch (changeType) {
      case 'javascript':
        await this.handleJavaScriptChange(serverInstance, filePath);
        break;
      case 'css':
        await this.handleCSSChange(serverInstance, filePath);
        break;
      case 'html':
        await this.handleHTMLChange(serverInstance, filePath);
        break;
      case 'asset':
        await this.handleAssetChange(serverInstance, filePath);
        break;
    }
    
    // Log the change
    serverInstance.logs.push({
      timestamp: new Date(),
      type: 'file_change',
      file: filePath,
      changeType: changeType
    });
  }

  determineChangeType(filePath) {
    const extension = filePath.split('.').pop().toLowerCase();
    
    const typeMap = {
      js: 'javascript',
      jsx: 'javascript',
      ts: 'javascript',
      tsx: 'javascript',
      css: 'css',
      scss: 'css',
      sass: 'css',
      less: 'css',
      html: 'html',
      htm: 'html',
      png: 'asset',
      jpg: 'asset',
      jpeg: 'asset',
      gif: 'asset',
      svg: 'asset',
      ico: 'asset'
    };
    
    return typeMap[extension] || 'unknown';
  }
}
```

#### Browser Sync and Multi-Device Testing:

**Multi-Device Preview Manager:**
```javascript
// multi-device-preview.js
class MultiDevicePreview {
  constructor() {
    this.browserSync = null;
    this.connectedDevices = new Map();
    this.syncOptions = {
      server: true,
      files: ['**/*'],
      open: 'external',
      tunnel: false,
      ghostMode: {
        clicks: true,
        forms: true,
        scroll: true
      }
    };
  }

  async setupMultiDevicePreview(serverConfig) {
    const setup = {
      browserSync: await this.initializeBrowserSync(serverConfig),
      tunnel: await this.setupTunnel(serverConfig),
      qrCode: await this.generateQRCode(serverConfig),
      deviceDetection: await this.setupDeviceDetection(),
      synchronization: await this.setupSynchronization()
    };

    return this.startMultiDeviceServer(setup);
  }

  async initializeBrowserSync(serverConfig) {
    const browserSync = require('browser-sync').create();
    
    const bsConfig = {
      server: {
        baseDir: serverConfig.static?.directory || '.',
        middleware: [
          this.createDeviceDetectionMiddleware(),
          this.createPerformanceMiddleware(),
          this.createErrorOverlayMiddleware()
        ]
      },
      port: serverConfig.port + 1000, // Use different port for BrowserSync
      ui: {
        port: serverConfig.port + 1001
      },
      files: [
        '**/*.html',
        '**/*.css',
        '**/*.js',
        '**/*.jsx',
        '**/*.ts',
        '**/*.tsx'
      ],
      watchOptions: {
        ignoreInitial: true,
        ignored: ['node_modules/**/*', '.git/**/*']
      },
      open: false, // Don't auto-open, we'll handle this
      notify: true,
      logLevel: 'info',
      ghostMode: {
        clicks: true,
        forms: true,
        scroll: true
      },
      snippetOptions: {
        rule: {
          match: /<\/body>/i,
          fn: (snippet, match) => {
            return snippet + match;
          }
        }
      }
    };

    return { browserSync, config: bsConfig };
  }

  createDeviceDetectionMiddleware() {
    return (req, res, next) => {
      const userAgent = req.headers['user-agent'];
      const deviceInfo = this.parseUserAgent(userAgent);
      
      // Store device information
      const deviceId = this.generateDeviceId(req);
      this.connectedDevices.set(deviceId, {
        id: deviceId,
        userAgent: userAgent,
        deviceInfo: deviceInfo,
        ip: req.ip,
        connectedAt: new Date(),
        lastSeen: new Date()
      });
      
      // Add device info to response headers
      res.setHeader('X-Device-Type', deviceInfo.type);
      res.setHeader('X-Device-OS', deviceInfo.os);
      res.setHeader('X-Device-Browser', deviceInfo.browser);
      
      next();
    };
  }

  parseUserAgent(userAgent) {
    const deviceInfo = {
      type: 'desktop',
      os: 'unknown',
      browser: 'unknown',
      version: 'unknown'
    };

    // Detect mobile devices
    if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {
      deviceInfo.type = 'mobile';
    } else if (/Tablet|iPad/i.test(userAgent)) {
      deviceInfo.type = 'tablet';
    }

    // Detect OS
    if (/Windows/i.test(userAgent)) {
      deviceInfo.os = 'Windows';
    } else if (/Mac OS X/i.test(userAgent)) {
      deviceInfo.os = 'macOS';
    } else if (/Linux/i.test(userAgent)) {
      deviceInfo.os = 'Linux';
    } else if (/Android/i.test(userAgent)) {
      deviceInfo.os = 'Android';
    } else if (/iOS|iPhone|iPad/i.test(userAgent)) {
      deviceInfo.os = 'iOS';
    }

    // Detect browser
    if (/Chrome/i.test(userAgent)) {
      deviceInfo.browser = 'Chrome';
    } else if (/Firefox/i.test(userAgent)) {
      deviceInfo.browser = 'Firefox';
    } else if (/Safari/i.test(userAgent)) {
      deviceInfo.browser = 'Safari';
    } else if (/Edge/i.test(userAgent)) {
      deviceInfo.browser = 'Edge';
    }

    return deviceInfo;
  }

  async setupTunnel(serverConfig) {
    // Setup ngrok tunnel for external access
    const ngrok = require('ngrok');
    
    try {
      const url = await ngrok.connect({
        port: serverConfig.port,
        subdomain: `dev-${Date.now()}`, // Unique subdomain
        region: 'us'
      });
      
      return {
        enabled: true,
        url: url,
        qrCode: await this.generateQRCode(url)
      };
    } catch (error) {
      console.warn('Tunnel setup failed:', error.message);
      return {
        enabled: false,
        error: error.message
      };
    }
  }

  async generateQRCode(url) {
    const QRCode = require('qrcode');
    
    try {
      const qrCodeDataURL = await QRCode.toDataURL(url, {
        width: 200,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      
      return {
        dataURL: qrCodeDataURL,
        url: url,
        instructions: 'Scan this QR code with your mobile device to access the preview'
      };
    } catch (error) {
      return {
        error: error.message
      };
    }
  }

  async setupSynchronization() {
    const sync = {
      clicks: true,
      forms: true,
      scroll: true,
      inputs: true,
      location: true
    };

    // Custom synchronization handlers
    const syncHandlers = {
      handleClick: (data) => {
        // Synchronize clicks across devices
        this.broadcastToDevices('click', data);
      },
      
      handleScroll: (data) => {
        // Synchronize scroll position
        this.broadcastToDevices('scroll', data);
      },
      
      handleFormInput: (data) => {
        // Synchronize form inputs
        this.broadcastToDevices('input', data);
      },
      
      handleLocationChange: (data) => {
        // Synchronize navigation
        this.broadcastToDevices('location', data);
      }
    };

    return { sync, handlers: syncHandlers };
  }

  broadcastToDevices(eventType, data) {
    if (this.browserSync) {
      this.browserSync.sockets.emit(eventType, data);
    }
  }

  generateDevicePreviewDashboard() {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Device Preview Dashboard</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }
        .dashboard {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .devices-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        .device-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .device-status {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-online { background: #4CAF50; }
        .status-offline { background: #f44336; }
        .qr-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .url-display {
            background: #f0f0f0;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <div class="header">
            <h1>Multi-Device Preview Dashboard</h1>
            <p>Monitor and synchronize your development across multiple devices</p>
        </div>

        <div class="devices-grid" id="devicesGrid">
            <!-- Devices will be populated here -->
        </div>

        <div class="qr-section">
            <h2>Quick Access</h2>
            <div class="url-display" id="localUrl">Loading...</div>
            <div id="qrCode">Generating QR code...</div>
            <p>Scan the QR code or visit the URL on your mobile device</p>
        </div>
    </div>

    <script>
        // Dashboard JavaScript will be injected here
        const dashboard = {
            updateDevices: function(devices) {
                const grid = document.getElementById('devicesGrid');
                grid.innerHTML = devices.map(device => \`
                    <div class="device-card">
                        <div class="device-status">
                            <div class="status-indicator status-\${device.online ? 'online' : 'offline'}"></div>
                            <strong>\${device.deviceInfo.type} - \${device.deviceInfo.browser}</strong>
                        </div>
                        <p><strong>OS:</strong> \${device.deviceInfo.os}</p>
                        <p><strong>IP:</strong> \${device.ip}</p>
                        <p><strong>Connected:</strong> \${new Date(device.connectedAt).toLocaleTimeString()}</p>
                        <p><strong>Last Seen:</strong> \${new Date(device.lastSeen).toLocaleTimeString()}</p>
                    </div>
                \`).join('');
            },
            
            updateUrls: function(urls) {
                document.getElementById('localUrl').textContent = urls.local;
                if (urls.tunnel) {
                    document.getElementById('localUrl').innerHTML += \`<br><strong>External:</strong> \${urls.tunnel}\`;
                }
            },
            
            updateQRCode: function(qrCodeDataURL) {
                document.getElementById('qrCode').innerHTML = \`<img src="\${qrCodeDataURL}" alt="QR Code">\`;
            }
        };

        // Auto-refresh dashboard every 5 seconds
        setInterval(() => {
            fetch('/api/dashboard-data')
                .then(response => response.json())
                .then(data => {
                    dashboard.updateDevices(data.devices);
                    dashboard.updateUrls(data.urls);
                    if (data.qrCode) {
                        dashboard.updateQRCode(data.qrCode);
                    }
                })
                .catch(console.error);
        }, 5000);
    </script>
</body>
</html>
`;
  }
}
```

### Step 3: Error Handling and Debugging

#### Real-time Error Display System:

**Development Error Manager:**
```javascript
// dev-error-manager.js
class DevErrorManager {
  constructor() {
    this.errorOverlay = null;
    this.errorLog = [];
    this.errorHandlers = new Map();
  }

  async setupErrorHandling(serverInstance) {
    const errorHandling = {
      overlay: await this.createErrorOverlay(),
      logging: await this.setupErrorLogging(),
      notifications: await this.setupErrorNotifications(),
      recovery: await this.setupErrorRecovery(),
      debugging: await this.setupDebuggingTools()
    };

    return this.activateErrorHandling(errorHandling, serverInstance);
  }

  createErrorOverlay() {
    const overlayHTML = `
      <div id="dev-error-overlay" style="display: none;">
        <style>
          #dev-error-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 999999;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            color: #fff;
            overflow: auto;
          }
          .error-container {
            max-width: 1000px;
            margin: 50px auto;
            padding: 20px;
          }
          .error-header {
            background: #ff4757;
            padding: 20px;
            border-radius: 8px 8px 0 0;
          }
          .error-title {
            font-size: 24px;
            font-weight: bold;
            margin: 0 0 10px 0;
          }
          .error-message {
            font-size: 16px;
            margin: 0;
            opacity: 0.9;
          }
          .error-body {
            background: #2f3542;
            padding: 20px;
            border-radius: 0 0 8px 8px;
          }
          .error-stack {
            background: #1e2328;
            padding: 15px;
            border-radius: 4px;
            overflow-x: auto;
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.5;
          }
          .error-actions {
            margin-top: 20px;
            text-align: center;
          }
          .error-button {
            background: #5352ed;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 0 10px;
            font-size: 14px;
          }
          .error-button:hover {
            background: #3742fa;
          }
          .close-button {
            position: absolute;
            top: 20px;
            right: 20px;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
          }
        </style>
        <div class="error-container">
          <button class="close-button" onclick="this.parentElement.parentElement.style.display='none'">&times;</button>
          <div class="error-header">
            <div class="error-title" id="error-title">Compilation Error</div>
            <div class="error-message" id="error-message">There was an error compiling your code</div>
          </div>
          <div class="error-body">
            <div class="error-stack" id="error-stack">Error details will appear here</div>
            <div class="error-actions">
              <button class="error-button" onclick="location.reload()">Reload Page</button>
              <button class="error-button" onclick="this.parentElement.parentElement.parentElement.parentElement.style.display='none'">Dismiss</button>
            </div>
          </div>
        </div>
      </div>
    `;

    return overlayHTML;
  }

  displayError(error) {
    const overlay = document.getElementById('dev-error-overlay');
    if (!overlay) {
      // Inject overlay if it doesn't exist
      document.body.insertAdjacentHTML('beforeend', this.createErrorOverlay());
    }

    // Update error content
    document.getElementById('error-title').textContent = error.type || 'Error';
    document.getElementById('error-message').textContent = error.message || 'An error occurred';
    document.getElementById('error-stack').textContent = error.stack || error.details || 'No additional details available';

    // Show overlay
    document.getElementById('dev-error-overlay').style.display = 'block';

    // Log error
    this.logError(error);
  }

  async setupErrorLogging() {
    const logging = {
      console: true,
      file: true,
      remote: false,
      maxLogSize: 1000
    };

    // Setup console error capture
    const originalConsoleError = console.error;
    console.error = (...args) => {
      this.handleConsoleError(args);
      originalConsoleError.apply(console, args);
    };

    // Setup window error capture
    window.addEventListener('error', (event) => {
      this.handleWindowError(event);
    });

    // Setup unhandled promise rejection capture
    window.addEventListener('unhandledrejection', (event) => {
      this.handleUnhandledRejection(event);
    });

    return logging;
  }

  handleConsoleError(args) {
    const error = {
      type: 'Console Error',
      message: args.join(' '),
      timestamp: new Date(),
      source: 'console'
    };

    this.addToErrorLog(error);
  }

  handleWindowError(event) {
    const error = {
      type: 'JavaScript Error',
      message: event.message,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
      stack: event.error?.stack,
      timestamp: new Date(),
      source: 'window'
    };

    this.displayError(error);
    this.addToErrorLog(error);
  }

  handleUnhandledRejection(event) {
    const error = {
      type: 'Unhandled Promise Rejection',
      message: event.reason?.message || event.reason,
      stack: event.reason?.stack,
      timestamp: new Date(),
      source: 'promise'
    };

    this.displayError(error);
    this.addToErrorLog(error);
  }

  addToErrorLog(error) {
    this.errorLog.unshift(error);
    
    // Keep only the last 100 errors
    if (this.errorLog.length > 100) {
      this.errorLog = this.errorLog.slice(0, 100);
    }

    // Notify error handlers
    this.notifyErrorHandlers(error);
  }

  async setupErrorRecovery() {
    const recovery = {
      autoReload: true,
      retryAttempts: 3,
      fallbackMode: true
    };

    // Setup automatic error recovery
    this.errorHandlers.set('auto-recovery', (error) => {
      if (error.type === 'Compilation Error' && recovery.autoReload) {
        setTimeout(() => {
          console.log('Attempting automatic recovery...');
          location.reload();
        }, 2000);
      }
    });

    return recovery;
  }

  generateErrorReport() {
    const report = {
      summary: {
        totalErrors: this.errorLog.length,
        recentErrors: this.errorLog.slice(0, 10),
        errorTypes: this.categorizeErrors(),
        timeRange: {
          from: this.errorLog[this.errorLog.length - 1]?.timestamp,
          to: this.errorLog[0]?.timestamp
        }
      },
      details: this.errorLog,
      patterns: this.analyzeErrorPatterns(),
      suggestions: this.generateErrorSuggestions()
    };

    return report;
  }

  categorizeErrors() {
    const categories = {};
    
    for (const error of this.errorLog) {
      const category = error.type || 'Unknown';
      categories[category] = (categories[category] || 0) + 1;
    }
    
    return categories;
  }

  analyzeErrorPatterns() {
    const patterns = [];
    
    // Find recurring errors
    const errorMessages = this.errorLog.map(e => e.message);
    const messageCounts = {};
    
    for (const message of errorMessages) {
      messageCounts[message] = (messageCounts[message] || 0) + 1;
    }
    
    for (const [message, count] of Object.entries(messageCounts)) {
      if (count > 2) {
        patterns.push({
          type: 'recurring_error',
          message: message,
          occurrences: count,
          suggestion: 'This error is occurring frequently. Consider investigating the root cause.'
        });
      }
    }
    
    return patterns;
  }
}
```

## Live Preview & Hot Reload Checklist

### ✅ Development Server Setup Complete When:
- [ ] Project type automatically detected
- [ ] Appropriate development server configured
- [ ] Available port found and reserved
- [ ] Dependencies installed and configured
- [ ] Development scripts created and tested

### ✅ Hot Reload Configuration Complete When:
- [ ] File watchers set up for all relevant file types
- [ ] Hot module replacement configured
- [ ] Browser refresh triggers working
- [ ] Change detection optimized for performance
- [ ] Error overlay system active

### ✅ Multi-Device Preview Complete When:
- [ ] Browser sync configured and running
- [ ] QR code generated for mobile access
- [ ] Device synchronization working
- [ ] External tunnel set up (if needed)
- [ ] Device dashboard accessible

### ✅ Error Handling Complete When:
- [ ] Error overlay system implemented
- [ ] Real-time error logging active
- [ ] Error recovery mechanisms in place
- [ ] Debugging tools integrated
- [ ] Error reporting and analysis available

### ✅ Performance Optimization Complete When:
- [ ] Fast refresh/hot reload working efficiently
- [ ] File watching optimized for large projects
- [ ] Memory usage monitored and controlled
- [ ] Network requests minimized
- [ ] Build times optimized

## Common Live Preview Issues and Solutions

### Issue: Port Already in Use
**Solutions:**
1. Implement automatic port detection and assignment
2. Kill existing processes using the port
3. Use port ranges for automatic fallback
4. Display clear error messages with suggested actions
5. Provide manual port configuration options

### Issue: Hot Reload Not Working
**Solutions:**
1. Check file watcher configuration and permissions
2. Verify WebSocket connections are established
3. Clear browser cache and hard refresh
4. Restart development server
5. Check for firewall or proxy interference

### Issue: Slow Reload Times
**Solutions:**
1. Optimize file watching patterns to exclude unnecessary files
2. Implement incremental compilation
3. Use faster bundlers (Vite instead of Webpack)
4. Enable caching for unchanged modules
5. Reduce bundle size and complexity

### Issue: Cross-Device Sync Problems
**Solutions:**
1. Ensure all devices are on the same network
2. Check firewall settings for local network access
3. Use external tunneling services for remote access
4. Verify browser compatibility for sync features
5. Implement fallback sync mechanisms

## Usage Instructions

To set up live preview and hot reload for real-time development feedback, ask:
"Set up live preview using @live-preview-manager.mdc for [project type], enabling hot reload and multi-device testing with [specific requirements]."

This will provide instant visual feedback, cross-device synchronization, and real-time error handling to dramatically improve your development workflow.

