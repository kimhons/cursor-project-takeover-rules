---
description: "Systematically add new features to existing projects without breaking functionality"
globs: ["*"]
alwaysApply: false
---

# New Feature Builder

You are helping someone with no coding experience systematically add new features to existing projects while maintaining stability and ensuring seamless integration.

## New Feature Development Process

### Step 1: Understanding Feature Development

#### What is New Feature Building?
Think of adding new features like renovating a house while people are still living in it:
- **Planning Phase**: Like creating detailed blueprints before construction
- **Foundation Check**: Like ensuring the house structure can support new additions
- **Incremental Building**: Like adding one room at a time, not tearing down walls
- **Testing Integration**: Like checking that new plumbing doesn't affect existing systems
- **Safety First**: Like ensuring residents can still use the house during construction
- **Quality Assurance**: Like having inspectors verify each phase before proceeding

#### Why Systematic Feature Building Matters:
- **Risk Mitigation**: Prevents breaking existing functionality
- **User Experience**: Maintains app stability during development
- **Development Efficiency**: Structured approach reduces debugging time
- **Code Quality**: Ensures new features follow existing patterns
- **Team Collaboration**: Clear process enables multiple developers to contribute
- **Business Continuity**: Features can be released incrementally

#### Common Feature Development Challenges:
- **Breaking Changes**: New features disrupting existing functionality
- **Integration Issues**: Features not working well with existing code
- **Inconsistent Design**: New features looking different from existing ones
- **Performance Impact**: New features slowing down the entire application
- **Testing Gaps**: Insufficient testing leading to bugs in production
- **Scope Creep**: Features becoming more complex than originally planned

### Step 2: Feature Planning and Analysis

#### Feature Requirements Analysis:

**Comprehensive Feature Planner:**
```javascript
// feature-planner.js
class FeaturePlanner {
  constructor(projectContext) {
    this.project = projectContext;
    this.featureSpecs = {};
  }

  async planNewFeature(featureDescription) {
    const featurePlan = {
      analysis: await this.analyzeFeatureRequirements(featureDescription),
      impact: await this.assessImpactOnExistingCode(),
      architecture: await this.designFeatureArchitecture(),
      implementation: await this.createImplementationPlan(),
      testing: await this.planTestingStrategy(),
      rollout: await this.planRolloutStrategy()
    };

    return this.generateFeatureBlueprint(featurePlan);
  }

  async analyzeFeatureRequirements(description) {
    const analysis = {
      userStories: this.extractUserStories(description),
      functionalRequirements: this.identifyFunctionalRequirements(description),
      nonFunctionalRequirements: this.identifyNonFunctionalRequirements(description),
      dependencies: await this.identifyDependencies(description),
      constraints: this.identifyConstraints(description),
      acceptance: this.defineAcceptanceCriteria(description)
    };

    return analysis;
  }

  extractUserStories(description) {
    // Parse feature description to extract user stories
    const userStories = [];
    
    // Example user story extraction
    const storyPatterns = [
      /as a (.*?), i want (.*?) so that (.*)/gi,
      /users? (?:should|can|need to|want to) (.*)/gi,
      /the system (?:should|must|will) (.*)/gi
    ];

    for (const pattern of storyPatterns) {
      const matches = [...description.matchAll(pattern)];
      for (const match of matches) {
        userStories.push({
          role: match[1] || 'user',
          action: match[2] || match[1],
          benefit: match[3] || 'improve user experience',
          priority: this.calculateStoryPriority(match[0])
        });
      }
    }

    // If no explicit user stories found, generate them
    if (userStories.length === 0) {
      userStories.push({
        role: 'user',
        action: description,
        benefit: 'enhanced functionality',
        priority: 'medium'
      });
    }

    return userStories;
  }

  async identifyDependencies(description) {
    const dependencies = {
      internal: await this.findInternalDependencies(description),
      external: await this.findExternalDependencies(description),
      data: await this.findDataDependencies(description),
      ui: await this.findUIDependencies(description)
    };

    return dependencies;
  }

  async findInternalDependencies(description) {
    const projectFiles = await this.scanProjectFiles();
    const dependencies = [];

    // Analyze existing code to find relevant components
    for (const file of projectFiles) {
      const relevance = this.calculateRelevanceScore(file.content, description);
      if (relevance > 0.7) {
        dependencies.push({
          file: file.path,
          type: file.type,
          relevance: relevance,
          reason: this.explainRelevance(file.content, description)
        });
      }
    }

    return dependencies;
  }

  async designFeatureArchitecture() {
    const architecture = {
      components: this.designComponents(),
      dataFlow: this.designDataFlow(),
      integration: this.designIntegrationPoints(),
      patterns: this.selectDesignPatterns(),
      structure: this.defineFileStructure()
    };

    return architecture;
  }

  designComponents() {
    // Design component architecture based on existing patterns
    const existingPatterns = this.analyzeExistingArchitecture();
    
    const components = {
      frontend: {
        components: [],
        pages: [],
        hooks: [],
        utils: []
      },
      backend: {
        controllers: [],
        services: [],
        models: [],
        middleware: []
      },
      shared: {
        types: [],
        constants: [],
        utilities: []
      }
    };

    return this.generateComponentSpecs(components, existingPatterns);
  }

  async createImplementationPlan() {
    const plan = {
      phases: this.defineImplementationPhases(),
      timeline: this.estimateTimeline(),
      resources: this.identifyRequiredResources(),
      risks: this.identifyImplementationRisks(),
      milestones: this.defineMilestones()
    };

    return plan;
  }

  defineImplementationPhases() {
    return [
      {
        phase: 1,
        name: 'Foundation Setup',
        description: 'Set up basic structure and dependencies',
        tasks: [
          'Create feature branch',
          'Set up basic file structure',
          'Install required dependencies',
          'Create basic component shells'
        ],
        duration: '1-2 hours',
        deliverables: ['Basic project structure', 'Development environment ready']
      },
      {
        phase: 2,
        name: 'Core Implementation',
        description: 'Implement main feature functionality',
        tasks: [
          'Implement core business logic',
          'Create user interface components',
          'Set up data management',
          'Implement API endpoints'
        ],
        duration: '4-8 hours',
        deliverables: ['Working feature prototype', 'Basic functionality complete']
      },
      {
        phase: 3,
        name: 'Integration & Polish',
        description: 'Integrate with existing system and polish UX',
        tasks: [
          'Integrate with existing components',
          'Implement error handling',
          'Add loading states and feedback',
          'Optimize performance'
        ],
        duration: '2-4 hours',
        deliverables: ['Fully integrated feature', 'Polished user experience']
      },
      {
        phase: 4,
        name: 'Testing & Validation',
        description: 'Comprehensive testing and bug fixes',
        tasks: [
          'Write unit tests',
          'Perform integration testing',
          'User acceptance testing',
          'Bug fixes and refinements'
        ],
        duration: '2-3 hours',
        deliverables: ['Tested feature', 'Documentation complete']
      }
    ];
  }
}
```

#### Impact Assessment System:

**Feature Impact Analyzer:**
```javascript
// feature-impact-analyzer.js
class FeatureImpactAnalyzer {
  constructor(projectContext) {
    this.project = projectContext;
  }

  async assessFeatureImpact(featureSpec) {
    const impact = {
      codebase: await this.analyzeCodebaseImpact(featureSpec),
      performance: await this.analyzePerformanceImpact(featureSpec),
      security: await this.analyzeSecurityImpact(featureSpec),
      ui: await this.analyzeUIImpact(featureSpec),
      data: await this.analyzeDataImpact(featureSpec),
      dependencies: await this.analyzeDependencyImpact(featureSpec)
    };

    return this.generateImpactReport(impact);
  }

  async analyzeCodebaseImpact(featureSpec) {
    const impact = {
      filesAffected: await this.identifyAffectedFiles(featureSpec),
      newFiles: this.calculateNewFiles(featureSpec),
      modifiedFunctions: await this.identifyModifiedFunctions(featureSpec),
      breakingChanges: await this.identifyBreakingChanges(featureSpec),
      complexity: this.calculateComplexityIncrease(featureSpec)
    };

    return impact;
  }

  async identifyAffectedFiles(featureSpec) {
    const affectedFiles = [];
    const projectFiles = await this.scanProjectFiles();

    for (const file of projectFiles) {
      const affectionLevel = this.calculateAffectionLevel(file, featureSpec);
      
      if (affectionLevel > 0) {
        affectedFiles.push({
          path: file.path,
          type: file.type,
          affectionLevel: affectionLevel,
          reason: this.explainAffection(file, featureSpec),
          modifications: this.predictModifications(file, featureSpec)
        });
      }
    }

    return affectedFiles.sort((a, b) => b.affectionLevel - a.affectionLevel);
  }

  async identifyBreakingChanges(featureSpec) {
    const breakingChanges = [];
    
    // Analyze API changes
    const apiChanges = await this.analyzeAPIChanges(featureSpec);
    if (apiChanges.breaking.length > 0) {
      breakingChanges.push(...apiChanges.breaking);
    }

    // Analyze database schema changes
    const schemaChanges = await this.analyzeSchemaChanges(featureSpec);
    if (schemaChanges.breaking.length > 0) {
      breakingChanges.push(...schemaChanges.breaking);
    }

    // Analyze component interface changes
    const componentChanges = await this.analyzeComponentChanges(featureSpec);
    if (componentChanges.breaking.length > 0) {
      breakingChanges.push(...componentChanges.breaking);
    }

    return breakingChanges;
  }

  async analyzePerformanceImpact(featureSpec) {
    const impact = {
      bundleSize: this.estimateBundleSizeIncrease(featureSpec),
      memoryUsage: this.estimateMemoryIncrease(featureSpec),
      networkRequests: this.estimateNetworkIncrease(featureSpec),
      renderingImpact: this.estimateRenderingImpact(featureSpec),
      databaseLoad: this.estimateDatabaseLoad(featureSpec)
    };

    return this.generatePerformanceReport(impact);
  }

  generateImpactReport(impact) {
    const report = {
      summary: this.generateImpactSummary(impact),
      riskLevel: this.calculateOverallRisk(impact),
      recommendations: this.generateRiskMitigationRecommendations(impact),
      approvalRequired: this.determineApprovalRequirements(impact)
    };

    return report;
  }

  calculateOverallRisk(impact) {
    let riskScore = 0;
    
    // Codebase risk
    if (impact.codebase.breakingChanges.length > 0) riskScore += 30;
    if (impact.codebase.filesAffected.length > 10) riskScore += 20;
    if (impact.codebase.complexity > 0.7) riskScore += 15;
    
    // Performance risk
    if (impact.performance.bundleSize > 100000) riskScore += 15; // 100KB
    if (impact.performance.networkRequests > 5) riskScore += 10;
    
    // Security risk
    if (impact.security.newPermissions.length > 0) riskScore += 20;
    if (impact.security.dataExposure.length > 0) riskScore += 25;

    if (riskScore >= 70) return 'high';
    if (riskScore >= 40) return 'medium';
    return 'low';
  }
}
```

### Step 3: Feature Implementation Framework

#### Safe Implementation System:

**Feature Implementation Manager:**
```javascript
// feature-implementation-manager.js
class FeatureImplementationManager {
  constructor(projectContext) {
    this.project = projectContext;
    this.implementationState = {
      currentPhase: 0,
      completedTasks: [],
      rollbackPoints: []
    };
  }

  async implementFeature(featurePlan) {
    const implementation = {
      setup: await this.setupFeatureEnvironment(featurePlan),
      phases: await this.executeImplementationPhases(featurePlan),
      integration: await this.integrateWithExistingCode(featurePlan),
      validation: await this.validateImplementation(featurePlan),
      deployment: await this.prepareForDeployment(featurePlan)
    };

    return this.generateImplementationReport(implementation);
  }

  async setupFeatureEnvironment(featurePlan) {
    const setup = {
      branch: await this.createFeatureBranch(featurePlan),
      structure: await this.createFileStructure(featurePlan),
      dependencies: await this.installDependencies(featurePlan),
      configuration: await this.setupConfiguration(featurePlan)
    };

    return setup;
  }

  async createFeatureBranch(featurePlan) {
    const branchName = this.generateBranchName(featurePlan);
    
    const branchSetup = {
      name: branchName,
      commands: [
        `git checkout -b ${branchName}`,
        `git push -u origin ${branchName}`
      ],
      protection: {
        requirePullRequest: true,
        requireReviews: 1,
        requireStatusChecks: true
      }
    };

    return branchSetup;
  }

  async createFileStructure(featurePlan) {
    const structure = featurePlan.architecture.structure;
    const createdFiles = [];

    for (const file of structure.files) {
      const filePath = this.resolvePath(file.path);
      const content = await this.generateFileContent(file);
      
      await this.createFile(filePath, content);
      createdFiles.push({
        path: filePath,
        type: file.type,
        size: content.length
      });
    }

    return {
      files: createdFiles,
      directories: structure.directories,
      total: createdFiles.length
    };
  }

  async generateFileContent(fileSpec) {
    const templates = {
      component: this.generateComponentTemplate,
      service: this.generateServiceTemplate,
      model: this.generateModelTemplate,
      test: this.generateTestTemplate,
      config: this.generateConfigTemplate
    };

    const generator = templates[fileSpec.type] || this.generateGenericTemplate;
    return await generator.call(this, fileSpec);
  }

  generateComponentTemplate(spec) {
    // Generate React component template
    return `
import React, { useState, useEffect } from 'react';
import { ${spec.imports.join(', ')} } from '${spec.importPath}';
import './${spec.name}.css';

interface ${spec.name}Props {
  ${spec.props.map(prop => `${prop.name}: ${prop.type};`).join('\n  ')}
}

const ${spec.name}: React.FC<${spec.name}Props> = ({
  ${spec.props.map(prop => prop.name).join(',\n  ')}
}) => {
  ${spec.state.map(state => `const [${state.name}, set${state.name}] = useState<${state.type}>(${state.initial});`).join('\n  ')}

  useEffect(() => {
    // Component initialization logic
    ${spec.effects.join('\n    ')}
  }, []);

  const handle${spec.name}Action = async () => {
    try {
      // Feature-specific logic
      ${spec.handlers.join('\n      ')}
    } catch (error) {
      console.error('${spec.name} error:', error);
      // Error handling logic
    }
  };

  return (
    <div className="${spec.name.toLowerCase()}">
      <h2>${spec.title}</h2>
      ${spec.elements.join('\n      ')}
    </div>
  );
};

export default ${spec.name};
`;
  }

  generateServiceTemplate(spec) {
    // Generate service class template
    return `
import { ${spec.imports.join(', ')} } from '${spec.importPath}';

export class ${spec.name}Service {
  private baseURL: string;
  private apiKey: string;

  constructor(config: ServiceConfig) {
    this.baseURL = config.baseURL;
    this.apiKey = config.apiKey;
  }

  ${spec.methods.map(method => `
  async ${method.name}(${method.params.join(', ')}): Promise<${method.returnType}> {
    try {
      const response = await fetch(\`\${this.baseURL}${method.endpoint}\`, {
        method: '${method.httpMethod}',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': \`Bearer \${this.apiKey}\`
        },
        ${method.httpMethod !== 'GET' ? 'body: JSON.stringify(data)' : ''}
      });

      if (!response.ok) {
        throw new Error(\`${method.name} failed: \${response.statusText}\`);
      }

      return await response.json();
    } catch (error) {
      console.error('${method.name} error:', error);
      throw error;
    }
  }`).join('\n')}
}

export default ${spec.name}Service;
`;
  }

  async executeImplementationPhases(featurePlan) {
    const phases = featurePlan.implementation.phases;
    const results = [];

    for (const phase of phases) {
      console.log(`Starting Phase ${phase.phase}: ${phase.name}`);
      
      const phaseResult = await this.executePhase(phase);
      results.push(phaseResult);
      
      // Create rollback point after each phase
      await this.createRollbackPoint(phase);
      
      if (!phaseResult.success) {
        console.error(`Phase ${phase.phase} failed:`, phaseResult.error);
        break;
      }
    }

    return results;
  }

  async executePhase(phase) {
    const result = {
      phase: phase.phase,
      name: phase.name,
      startTime: new Date(),
      tasks: [],
      success: false,
      error: null
    };

    try {
      for (const task of phase.tasks) {
        const taskResult = await this.executeTask(task);
        result.tasks.push(taskResult);
        
        if (!taskResult.success) {
          throw new Error(`Task failed: ${task}`);
        }
      }
      
      result.success = true;
    } catch (error) {
      result.error = error.message;
    } finally {
      result.endTime = new Date();
      result.duration = result.endTime - result.startTime;
    }

    return result;
  }

  async integrateWithExistingCode(featurePlan) {
    const integration = {
      components: await this.integrateComponents(featurePlan),
      routes: await this.integrateRoutes(featurePlan),
      state: await this.integrateStateManagement(featurePlan),
      apis: await this.integrateAPIs(featurePlan),
      styles: await this.integrateStyles(featurePlan)
    };

    return integration;
  }

  async integrateComponents(featurePlan) {
    const integrations = [];
    
    for (const component of featurePlan.architecture.components.frontend.components) {
      const integration = {
        component: component.name,
        parentComponents: await this.findParentComponents(component),
        imports: await this.updateImports(component),
        exports: await this.updateExports(component)
      };
      
      integrations.push(integration);
    }

    return integrations;
  }

  async validateImplementation(featurePlan) {
    const validation = {
      functionality: await this.validateFunctionality(featurePlan),
      integration: await this.validateIntegration(featurePlan),
      performance: await this.validatePerformance(featurePlan),
      security: await this.validateSecurity(featurePlan),
      accessibility: await this.validateAccessibility(featurePlan)
    };

    return this.generateValidationReport(validation);
  }

  async validateFunctionality(featurePlan) {
    const tests = [];
    
    // Run unit tests
    const unitTests = await this.runUnitTests(featurePlan);
    tests.push(...unitTests);
    
    // Run integration tests
    const integrationTests = await this.runIntegrationTests(featurePlan);
    tests.push(...integrationTests);
    
    // Run user acceptance tests
    const userTests = await this.runUserAcceptanceTests(featurePlan);
    tests.push(...userTests);

    return {
      total: tests.length,
      passed: tests.filter(t => t.passed).length,
      failed: tests.filter(t => !t.passed).length,
      coverage: this.calculateTestCoverage(tests),
      details: tests
    };
  }
}
```

#### Feature Testing Framework:

**Automated Feature Testing:**
```javascript
// feature-testing-framework.js
class FeatureTestingFramework {
  constructor() {
    this.testSuites = [];
  }

  async generateFeatureTests(featurePlan) {
    const testSuite = {
      unit: await this.generateUnitTests(featurePlan),
      integration: await this.generateIntegrationTests(featurePlan),
      e2e: await this.generateE2ETests(featurePlan),
      performance: await this.generatePerformanceTests(featurePlan),
      accessibility: await this.generateAccessibilityTests(featurePlan)
    };

    return this.createTestFiles(testSuite);
  }

  async generateUnitTests(featurePlan) {
    const tests = [];
    
    for (const component of featurePlan.architecture.components.frontend.components) {
      tests.push(this.generateComponentTest(component));
    }
    
    for (const service of featurePlan.architecture.components.backend.services) {
      tests.push(this.generateServiceTest(service));
    }

    return tests;
  }

  generateComponentTest(component) {
    return `
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import ${component.name} from './${component.name}';

describe('${component.name}', () => {
  const defaultProps = {
    ${component.props.map(prop => `${prop.name}: ${this.generateMockValue(prop.type)}`).join(',\n    ')}
  };

  beforeEach(() => {
    // Setup before each test
  });

  afterEach(() => {
    // Cleanup after each test
    jest.clearAllMocks();
  });

  test('renders without crashing', () => {
    render(<${component.name} {...defaultProps} />);
    expect(screen.getByText('${component.title}')).toBeInTheDocument();
  });

  test('handles user interactions correctly', async () => {
    render(<${component.name} {...defaultProps} />);
    
    const actionButton = screen.getByRole('button', { name: /action/i });
    fireEvent.click(actionButton);
    
    await waitFor(() => {
      expect(screen.getByText(/success/i)).toBeInTheDocument();
    });
  });

  test('displays error states appropriately', async () => {
    const errorProps = { ...defaultProps, shouldError: true };
    render(<${component.name} {...errorProps} />);
    
    await waitFor(() => {
      expect(screen.getByText(/error/i)).toBeInTheDocument();
    });
  });

  test('handles loading states', () => {
    const loadingProps = { ...defaultProps, isLoading: true };
    render(<${component.name} {...loadingProps} />);
    
    expect(screen.getByText(/loading/i)).toBeInTheDocument();
  });

  ${component.customTests.map(test => `
  test('${test.description}', ${test.async ? 'async ' : ''}() => {
    ${test.setup}
    
    ${test.action}
    
    ${test.assertion}
  });`).join('\n')}
});
`;
  }

  async generateIntegrationTests(featurePlan) {
    const tests = [];
    
    // Test feature integration with existing components
    tests.push(this.generateFeatureIntegrationTest(featurePlan));
    
    // Test API integration
    tests.push(this.generateAPIIntegrationTest(featurePlan));
    
    // Test database integration
    tests.push(this.generateDatabaseIntegrationTest(featurePlan));

    return tests;
  }

  generateFeatureIntegrationTest(featurePlan) {
    return `
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { store } from '../store';
import App from '../App';

describe('${featurePlan.name} Integration', () => {
  const renderWithProviders = (component) => {
    return render(
      <Provider store={store}>
        <BrowserRouter>
          {component}
        </BrowserRouter>
      </Provider>
    );
  };

  test('feature integrates with main application', async () => {
    renderWithProviders(<App />);
    
    // Navigate to feature
    const featureLink = screen.getByText('${featurePlan.name}');
    fireEvent.click(featureLink);
    
    await waitFor(() => {
      expect(screen.getByText('${featurePlan.title}')).toBeInTheDocument();
    });
  });

  test('feature works with existing state management', async () => {
    renderWithProviders(<App />);
    
    // Test state integration
    const stateElement = screen.getByTestId('feature-state');
    expect(stateElement).toHaveTextContent('initial state');
    
    // Trigger state change
    const actionButton = screen.getByRole('button', { name: /update/i });
    fireEvent.click(actionButton);
    
    await waitFor(() => {
      expect(stateElement).toHaveTextContent('updated state');
    });
  });

  test('feature maintains existing functionality', async () => {
    renderWithProviders(<App />);
    
    // Test that existing features still work
    const existingFeature = screen.getByTestId('existing-feature');
    fireEvent.click(existingFeature);
    
    await waitFor(() => {
      expect(screen.getByText('Existing Feature Works')).toBeInTheDocument();
    });
  });
});
`;
  }

  async generateE2ETests(featurePlan) {
    return `
import { test, expect } from '@playwright/test';

test.describe('${featurePlan.name} E2E Tests', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    // Setup authentication if needed
    await page.fill('[data-testid="username"]', 'testuser');
    await page.fill('[data-testid="password"]', 'testpass');
    await page.click('[data-testid="login"]');
  });

  test('complete feature workflow', async ({ page }) => {
    // Navigate to feature
    await page.click('text=${featurePlan.name}');
    await expect(page.locator('h1')).toContainText('${featurePlan.title}');
    
    // Test main workflow
    ${featurePlan.userStories.map(story => `
    // User Story: ${story.action}
    await page.click('[data-testid="${story.action.toLowerCase().replace(/\s+/g, '-')}"]');
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    `).join('\n')}
  });

  test('error handling and recovery', async ({ page }) => {
    await page.goto('/${featurePlan.route}');
    
    // Simulate error condition
    await page.route('**/api/${featurePlan.apiEndpoint}', route => {
      route.fulfill({ status: 500, body: 'Server Error' });
    });
    
    await page.click('[data-testid="trigger-action"]');
    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    
    // Test recovery
    await page.click('[data-testid="retry-button"]');
    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
  });

  test('responsive design and mobile compatibility', async ({ page }) => {
    // Test desktop view
    await page.setViewportSize({ width: 1200, height: 800 });
    await page.goto('/${featurePlan.route}');
    await expect(page.locator('[data-testid="desktop-layout"]')).toBeVisible();
    
    // Test tablet view
    await page.setViewportSize({ width: 768, height: 1024 });
    await expect(page.locator('[data-testid="tablet-layout"]')).toBeVisible();
    
    // Test mobile view
    await page.setViewportSize({ width: 375, height: 667 });
    await expect(page.locator('[data-testid="mobile-layout"]')).toBeVisible();
  });
});
`;
  }
}
```

### Step 4: Feature Quality Assurance

#### Quality Validation System:

**Feature Quality Validator:**
```javascript
// feature-quality-validator.js
class FeatureQualityValidator {
  constructor() {
    this.qualityMetrics = {
      functionality: 0,
      performance: 0,
      security: 0,
      usability: 0,
      maintainability: 0
    };
  }

  async validateFeatureQuality(featurePlan, implementation) {
    const validation = {
      codeQuality: await this.validateCodeQuality(implementation),
      performance: await this.validatePerformance(implementation),
      security: await this.validateSecurity(implementation),
      accessibility: await this.validateAccessibility(implementation),
      usability: await this.validateUsability(implementation),
      documentation: await this.validateDocumentation(implementation)
    };

    return this.generateQualityReport(validation);
  }

  async validateCodeQuality(implementation) {
    const quality = {
      complexity: await this.analyzeComplexity(implementation),
      maintainability: await this.analyzeMaintainability(implementation),
      testCoverage: await this.analyzeTestCoverage(implementation),
      codeStyle: await this.analyzeCodeStyle(implementation),
      dependencies: await this.analyzeDependencies(implementation)
    };

    return quality;
  }

  async analyzeComplexity(implementation) {
    const complexity = {
      cyclomaticComplexity: 0,
      cognitiveComplexity: 0,
      linesOfCode: 0,
      functions: 0
    };

    for (const file of implementation.files) {
      const fileComplexity = await this.analyzeFileComplexity(file);
      complexity.cyclomaticComplexity += fileComplexity.cyclomatic;
      complexity.cognitiveComplexity += fileComplexity.cognitive;
      complexity.linesOfCode += fileComplexity.loc;
      complexity.functions += fileComplexity.functions;
    }

    return {
      ...complexity,
      averageComplexity: complexity.cyclomaticComplexity / complexity.functions,
      complexityRating: this.rateComplexity(complexity)
    };
  }

  async validatePerformance(implementation) {
    const performance = {
      bundleSize: await this.measureBundleSize(implementation),
      loadTime: await this.measureLoadTime(implementation),
      renderTime: await this.measureRenderTime(implementation),
      memoryUsage: await this.measureMemoryUsage(implementation),
      networkRequests: await this.analyzeNetworkRequests(implementation)
    };

    return {
      ...performance,
      performanceScore: this.calculatePerformanceScore(performance),
      recommendations: this.generatePerformanceRecommendations(performance)
    };
  }

  async validateSecurity(implementation) {
    const security = {
      vulnerabilities: await this.scanVulnerabilities(implementation),
      authentication: await this.validateAuthentication(implementation),
      authorization: await this.validateAuthorization(implementation),
      dataValidation: await this.validateDataValidation(implementation),
      encryption: await this.validateEncryption(implementation)
    };

    return {
      ...security,
      securityScore: this.calculateSecurityScore(security),
      criticalIssues: security.vulnerabilities.filter(v => v.severity === 'critical')
    };
  }

  generateQualityReport(validation) {
    const overallScore = this.calculateOverallQualityScore(validation);
    
    const report = {
      overallScore,
      grade: this.assignQualityGrade(overallScore),
      summary: this.generateQualitySummary(validation),
      recommendations: this.generateQualityRecommendations(validation),
      actionItems: this.generateActionItems(validation),
      approval: this.determineApprovalStatus(validation)
    };

    return report;
  }

  calculateOverallQualityScore(validation) {
    const weights = {
      codeQuality: 0.25,
      performance: 0.20,
      security: 0.25,
      accessibility: 0.15,
      usability: 0.15
    };

    let totalScore = 0;
    totalScore += validation.codeQuality.score * weights.codeQuality;
    totalScore += validation.performance.performanceScore * weights.performance;
    totalScore += validation.security.securityScore * weights.security;
    totalScore += validation.accessibility.score * weights.accessibility;
    totalScore += validation.usability.score * weights.usability;

    return Math.round(totalScore);
  }

  assignQualityGrade(score) {
    if (score >= 90) return 'A';
    if (score >= 80) return 'B';
    if (score >= 70) return 'C';
    if (score >= 60) return 'D';
    return 'F';
  }
}
```

## New Feature Building Checklist

### ✅ Feature Planning Complete When:
- [ ] User stories clearly defined and prioritized
- [ ] Technical requirements documented
- [ ] Impact assessment completed
- [ ] Architecture design approved
- [ ] Implementation plan created with timeline

### ✅ Implementation Setup Complete When:
- [ ] Feature branch created and protected
- [ ] File structure established
- [ ] Dependencies installed and configured
- [ ] Development environment ready
- [ ] Rollback strategy in place

### ✅ Core Development Complete When:
- [ ] Main functionality implemented
- [ ] User interface components created
- [ ] API endpoints developed
- [ ] Data management implemented
- [ ] Error handling added

### ✅ Integration Complete When:
- [ ] Feature integrated with existing components
- [ ] State management connected
- [ ] Routing configured
- [ ] Styling consistent with existing design
- [ ] No breaking changes to existing functionality

### ✅ Quality Assurance Complete When:
- [ ] Unit tests written and passing
- [ ] Integration tests completed
- [ ] End-to-end tests successful
- [ ] Performance benchmarks met
- [ ] Security validation passed
- [ ] Accessibility standards met

### ✅ Deployment Ready When:
- [ ] Code review completed
- [ ] Documentation updated
- [ ] Feature flags configured
- [ ] Rollback plan tested
- [ ] Monitoring and analytics set up

## Common Feature Development Issues and Solutions

### Issue: Breaking Existing Functionality
**Solutions:**
1. Implement comprehensive regression testing
2. Use feature flags for gradual rollout
3. Create detailed rollback procedures
4. Conduct thorough impact analysis
5. Implement proper version control branching

### Issue: Poor Integration with Existing Code
**Solutions:**
1. Follow existing code patterns and conventions
2. Use dependency injection for loose coupling
3. Implement proper abstraction layers
4. Conduct integration testing early and often
5. Review existing architecture before implementation

### Issue: Performance Degradation
**Solutions:**
1. Implement performance monitoring
2. Use code splitting and lazy loading
3. Optimize bundle size and dependencies
4. Implement proper caching strategies
5. Conduct performance testing throughout development

### Issue: Inconsistent User Experience
**Solutions:**
1. Follow existing design system and patterns
2. Implement comprehensive style guides
3. Conduct user experience testing
4. Ensure responsive design across devices
5. Maintain accessibility standards

## Usage Instructions

To systematically build new features while maintaining stability, ask:
"Build a new feature using @new-feature-builder.mdc for [feature description], ensuring safe integration with existing functionality and comprehensive testing."

This will provide a complete feature development plan with risk assessment, implementation phases, testing strategy, and quality validation.

